= Panels =

== ui.AbsolutePanel ==

ui.AbsolutePanel is a panel that positions its children using absolute pixel positions. This allows the panel's children to overlap.

Note that the AbsolutePanel does not automatically resize itself to fit its children. There is no straightforward way of doing this unless all the children are explicitly sized; the easier workaround is just to call panel.setWidth(width) and panel.setHeight(height) explicitly after adding the children, choosing an appropriate width and height based on the children you have added.

Working Example

Child 1
Child 2

Source Code


{{
from pyjamas.ui import SimplePanel, AbsolutePanel, VerticalPanel, HTML
from pyjamas import DOM


class AbsolutePanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        panel = AbsolutePanel()

        panel.add(self.makeBox("Child 1"), 20, 10)
        panel.add(self.makeBox("Child 2"), 30, 30)

        panel.setWidth("100%")
        panel.setHeight("100px")

        self.add(panel)


    def makeBox(self, label):
        wrapper = VerticalPanel()
        wrapper.setBorderWidth(1)
        wrapper.add(HTML(label))
        DOM.setIntAttribute(wrapper.getTable(), "cellPadding", 10)
        DOM.setAttribute(wrapper.getTable(), "bgColor", "#C3D9FF")

        return wrapper
}}



== ui.DialogBox ==

The ui.DialogBox class implements a panel that behaves like a dialog box.

A dialog box has an optional caption, and a widget which is displayed as the main part of the dialog box. The user can drag the dialog box around by clicking on the caption.

The DialogBox class makes use of stylesheet definitions; if these are not supplied, the dialog box will look very strange. The following stylesheet definitions are used by the example shown below:

        .gwt-DialogBox {
          border: 2px outset;
          background-color: white;
        }

        .gwt-DialogBox .Caption {
          background-color: #C3D9FF;
          padding: 3px;
          margin: 2px;
          font-weight: bold;
          cursor: default;
        }

        .gwt-DialogBox .Contents {
            padding: 10px;
        }

Because the DialogBox class is derived from PopupPanel, the user should be able to click outside the dialog box to close it. However, because of a problem with Firefox 3, this does not work. To get around this, the example shown below implements a "Close" button the user can click on.

Working Example

Show Dialog

Source Code


{{
from pyjamas.ui import SimplePanel, DialogBox, VerticalPanel, HTML, Button
from pyjamas import Window

class DialogBoxDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        self.add(Button("Show Dialog", getattr(self, "showDialog")))


    def showDialog(self):
        contents = VerticalPanel()
        contents.setSpacing(4)
        contents.add(HTML('You can place any contents you like in a dialog box.'))
        contents.add(Button("Close", getattr(self, "onClose")))
        contents.setStyleName("Contents")

        self._dialog = DialogBox()
        self._dialog.setHTML('<b>Welcome to the dialog box</b>')
        self._dialog.setWidget(contents)

        left = (Window.getClientWidth() - 200) / 2
        top = (Window.getClientHeight() - 100) / 2
        self._dialog.setPopupPosition(left, top)
        self._dialog.show()


    def onClose(self):
        self._dialog.hide()
}}






== ui.DockPanel ==

The ui.DockPanel class divides the panel into five pieces, arranged into North, South, East, West and center pieces. In general the outer pieces are smaller, with the centre holding the main part of the panel's contents, as shown below.

You can set the alignment and size for each widget within the DockPanel, by calling setCellHorizontalAlignment(widget, alignment), setCellVerticalAlignment(widget, alignment), setCellHeight(widget, height) and setCellWidth(widget, width). You can also set the default horizontal and vertical alignment to use for new widgets by calling setHorizontalAlignment() and setVerticalAlignment() before the widget is added.

Working Example

North
West
	
Center
	
East
South

Source Code


{{
from pyjamas.ui import SimplePanel, DockPanel, Label, HasAlignment

class DockPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        panel = DockPanel()
        panel.setBorderWidth(1)

        north  = Label("North")
        west   = Label("West")
        center = Label("Center")
        east   = Label("East")
        south  = Label("South")

        panel.setHorizontalAlignment(HasAlignment.ALIGN_CENTER)
        panel.setVerticalAlignment(HasAlignment.ALIGN_MIDDLE)

        panel.add(north,  DockPanel.NORTH)
        panel.add(west,   DockPanel.WEST)
        panel.add(center, DockPanel.CENTER)
        panel.add(east,   DockPanel.EAST)
        panel.add(south,  DockPanel.SOUTH)

        panel.setCellHeight(center, "200px")
        panel.setCellWidth(center, "400px")

        self.add(panel)
}}














== ui.FlexTable ==

The ui.FlexTable class implements a table that can have different numbers of cells in each row, and single cells can span multiple rows and columns.

Each FlexTable has a FlexCellFormatter which you can use to format the cells in the table. The FlexCellFormatter has methods to set the row or column spans for a cell, as well as change the cell alignment, as shown below.

Note that if you use row or column spanning, the cells on the rest of that row or column will be moved over. This can cause some surprising results. Imagine that you have a table like this:

        +---+---+---+
        | A | B | C |
        +---+---+---+
        | D | E | F |
        +---+---+---+

If you set up Cell 0,0 to span two columns, like this:

        flexTable.getFlexCellFormatter().setColSpan(0, 0, 2)

This will cause the table to end up looking like this:

        +-------+---+---+
        |   A   | B | C |
        +---+---+---+---+
        | D | E | F |
        +---+---+---+

you might expect cell B to be above cell E, but to make this happen you need to place cell E at (1, 2) rather than (1, 1).

Each FlexTable also has a RowFormatter which can be used to change style names, attributes, and the visibility of rows in the table.

Working Example

Mammals
Cow	Rat	Dog
Hide	1,1	2,1
1,2	2,2
Show

Source Code


{{
from pyjamas.ui import SimplePanel, FlexTable, HasAlignment, Button

class FlexTableDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        self._table = FlexTable()
        self._table.setBorderWidth(1)
        self._table.setWidth("100%")

        cellFormatter = self._table.getFlexCellFormatter()
        rowFormatter = self._table.getRowFormatter()

        self._table.setHTML(0, 0, "<b>Mammals</b>")
        self._table.setText(1, 0, "Cow")
        self._table.setText(1, 1, "Rat")
        self._table.setText(1, 2, "Dog")

        cellFormatter.setColSpan(0, 0, 3)
        cellFormatter.setHorizontalAlignment(0, 0, HasAlignment.ALIGN_CENTER)

        self._table.setWidget(2, 0, Button("Hide", getattr(self, "hideRows")))
        self._table.setText(2, 1, "1,1")
        self._table.setText(2, 2, "2,1")
        self._table.setText(3, 0, "1,2")
        self._table.setText(3, 1, "2,2")

        cellFormatter.setRowSpan(2, 0, 2)
        cellFormatter.setVerticalAlignment(2, 0, HasAlignment.ALIGN_MIDDLE)

        self._table.setWidget(4, 0, Button("Show", getattr(self, "showRows")))

        cellFormatter.setColSpan(4, 0, 3)

        rowFormatter.setVisible(4, False)

        self.add(self._table)


    def hideRows(self):
        rowFormatter = self._table.getRowFormatter()
        rowFormatter.setVisible(2, False)
        rowFormatter.setVisible(3, False)
        rowFormatter.setVisible(4, True)


    def showRows(self):
        rowFormatter = self._table.getRowFormatter()
        rowFormatter.setVisible(2, True)
        rowFormatter.setVisible(3, True)
        rowFormatter.setVisible(4, False)
}}














== ui.FlowPanel ==

The ui.FlowPanel is a panel that allows its contents to "flow" from left to right, and then from top to bottom, like words on a page.

Because of the way it works, only the width of a FlowPanel needs to be specified; it will automatically take up as much height as is needed to fit the panel's contents.

Unfortunately, the implementation of the FlowPanel is actually quite limited, because of the way other widgets are typically implemented. Many widgets are wrapped up in a
element, which is a block-level element that overrules the element used by the FlowPanel, which is an inline element. As a result, if you add a ui.Label to a FlowPanel, for example, it will still appear on a line by itself rather than flowing with the other elements. Because of this, you may want to avoid using FlowPanel unless you are certain that the items you are adding will flow correctly.

Working Example

Item 1Item 2Item 3Item 4Item 5Item 6Item 7Item 8Item 9Item 10

Source Code


{{
from pyjamas.ui import SimplePanel, FlowPanel, Button

class FlowPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        flow = FlowPanel()

        flow.add(Button("Item 1"))
        flow.add(Button("Item 2"))
        flow.add(Button("Item 3"))
        flow.add(Button("Item 4"))
        flow.add(Button("Item 5"))
        flow.add(Button("Item 6"))
        flow.add(Button("Item 7"))
        flow.add(Button("Item 8"))
        flow.add(Button("Item 9"))
        flow.add(Button("Item 10"))
        flow.setWidth("400px")
        self.add(flow)
}}














== ui.FormPanel ==

The ui.FormPanel class implements a traditional HTML form.

Any TextBox, PasswordTextBox, TextArea, RadioButton, CheckBox, ListBox, FileUpload and Hidden fields contained within the form panel will be sent to the server when the form is submitted.

The example below calls Google to perform a search using the query entered by the user into the text field. The results are shown in a separate Frame. Alternatively, you can call Form.addFormHandler(handler) to manually process the results of posting the form. When this is done, handler.onSubmit(event) will be called when the user is about to submit the form; call event.setCancelled(True) to cancel the event within this method. Also, handler.onSubmitComplete(event) will be called when the results of submitting the form are returned back to the browser. Call event.getResults() to retrieve the (plain-text) value returned by the server.

Note that if you use a ui.FileUpload widget in your form, you must set the form encoding and method like this:

            self.form.setEncoding(FormPanel.ENCODING_MULTIPART)
            self.form.setMethod(FormPanel.METHOD_POST)

This will ensure that the form is submitted in a way that allows files to be uploaded.

Working Example

Search for:
		Submit

Source Code


{{
from pyjamas.ui import SimplePanel, FormPanel, VerticalPanel, HorizontalPanel, TextBox, Label, Button

class FormPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        self.form = FormPanel()
        self.form.setAction("http://google.com/search")
        self.form.setTarget("results")

        vPanel = VerticalPanel()

        hPanel = HorizontalPanel()
        hPanel.add(Label("Search for:"))

        self.field = TextBox()
        self.field.setName("q")
        hPanel.add(self.field)

        hPanel.add(Button("Submit", getattr(self, "onBtnClick")))

        vPanel.add(hPanel)

        results = NamedFrame("results")
        vPanel.add(results)

        self.form.add(vPanel)
        self.add(self.form)


    def onBtnClick(self):
        self.form.submit()
}}












== ui.Grid ==

The ui.Grid class implements a panel which lays its contents out in a grid-like fashion, very like an HTML table.

You can use the setHTML(row, col, html) method to set the HTML-formatted text to be displayed at the given row and column within the grid. Similarly, you can call setText(row, col, text) to display plain (unformatted) text at the given row and column.

Working Example

Hello, World!	 	 	 	 
 	1*1 = 1	1*2 = 2	1*3 = 3	1*4 = 4
 	2*1 = 2	2*2 = 4	2*3 = 6	2*4 = 8
 	3*1 = 3	3*2 = 6	3*3 = 9	3*4 = 12
 	4*1 = 4	4*2 = 8	4*3 = 12	4*4 = 16

Source Code


{{
from pyjamas.ui import SimplePanel, Grid

class GridDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        grid = Grid(5, 5)
        grid.setHTML(0, 0, '<b>Hello, World!</b>')
        grid.setBorderWidth(2)
        grid.setCellPadding(4)
        grid.setCellSpacing(1)

        for row in range(1, 5):
            for col in range(1, 5):
                grid.setText(row, col, str(row) + "*" + str(col) + " = " + str(row*col))

        self.add(grid)
}}



















== ui.HorizontalPanel ==

The ui.HorizontalPanel class is a panel that lays out its contents from left to right.

It is often useful to call setSpacing(spacing) to add space between each of the panel's widgets. You can also call setHorizontalAlignment(alignment) and setVerticalAlignment(alignment) before adding widgets to control how those widgets are aligned within the available space. Alternatively, you can call setCellHorizontalAlignment(widget, alignment) and setCellVerticalAlignment(widget, alignment) to change the alignment of a single widget after it has been added.

Note that if you want to have different widgets within the panel take up different amounts of space, don't call widget.setWidth(width) or widget.setHeight(height) as these are ignored by the panel. Instead, call panel.setCellWidth(widget, width) and panel.setCellHeight(widget, height).

Working Example

Part 1
	
Part 2
	
Part 3
	
Part 4

Source Code


{{
from pyjamas.ui import SimplePanel, HorizontalPanel, Label, HasAlignment

class HorizontalPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        panel = HorizontalPanel()
        panel.setBorderWidth(1)

        panel.setHorizontalAlignment(HasAlignment.ALIGN_CENTER)
        panel.setVerticalAlignment(HasAlignment.ALIGN_MIDDLE)

        part1 = Label("Part 1")
        part2 = Label("Part 2")
        part3 = Label("Part 3")
        part4 = Label("Part 4")

        panel.add(part1)
        panel.add(part2)
        panel.add(part3)
        panel.add(part4)

        panel.setCellWidth(part1, "10%")
        panel.setCellWidth(part2, "70%")
        panel.setCellWidth(part3, "10%")
        panel.setCellWidth(part4, "10%")

        panel.setCellVerticalAlignment(part3, HasAlignment.ALIGN_BOTTOM)

        panel.setWidth("100%")
        panel.setHeight("200px")

        self.add(panel)
}}












== ui.HtmlPanel ==

The ui.HTMLPanel class allows you to include HTML within your application, and embed other widgets inside the panel's contents by wrapping them inside a <span> tag.

Working Example

This is some HTML
First widget:Hi there
Second widget:
This label intentionally left blank

More HTML

Source Code


{{
from pyjamas.ui import SimplePanel, HTMLPanel, Button, Label

class HtmlPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        id1 = HTMLPanel.createUniqueId()
        id2 = HTMLPanel.createUniqueId()

        panel = HTMLPanel('<b>This is some HTML</b><br>' +
                          'First widget:<span id="' + id1 + '"></span><br>' +
                          'Second widget:<span id="' + id2 + '"></span><br>' +
                          'More <i>HTML</i>')

        panel.add(Button("Hi there"), id1)
        panel.add(Label("This label intentionally left blank"), id2)

        self.add(panel)
}}










== ui.PopupPanel ==

The ui.PopupPanel class implements a panel that pops up in the browser window to display some contents. When the user clicks outside the popup, it disappears again.

The PopupPanel requires stylesheet definitions in order to work properly. The following stylesheet definitions were used in the example below:

        .showcase-popup {
            background-color: white;
            border: 1px solid #87B3FF;
            padding: 4px;
        }

Note that the popup panel is supposed to close when the user clicks outside of it. However, this doesn't work under Firefox 3, so the code below adds a click handler so the user can click on the popup itself to close it.

Working Example

Click on the button below to display the popup.
Click Me

Source Code


{{
from pyjamas.ui import SimplePanel, VerticalPanel, HTML, Button, PopupPanel

class PopupPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        vPanel = VerticalPanel()
        vPanel.setSpacing(4)

        self._btn = Button("Click Me", getattr(self, "showPopup"))

        vPanel.add(HTML("Click on the button below to display the popup."))
        vPanel.add(self._btn)

        self.add(vPanel)


    def showPopup(self):
        contents = HTML("Hello, World!")
        contents.addClickListener(getattr(self, "onClick"))

        self._popup = PopupPanel(autoHide=True)
        self._popup.add(contents)
        self._popup.setStyleName("showcase-popup")

        left = self._btn.getAbsoluteLeft() + 10
        top  = self._btn.getAbsoluteTop() + 10
        self._popup.setPopupPosition(left, top)
        self._popup.show()


    def onClick(self):
        self._popup.hide()
}}















== ui.ScrollPanel ==

The ui.ScrollPanel class implements a panel that scrolls its contents.

If you want the scroll bars to be always visible, call setAlwaysShowScrollBars(True). You can also change the current scrolling position programmatically by calling setScrollPosition(vPos) and setScrollHorizontalPosition(hPos) to change the horizontal and vertical scrolling position, respectively.

Working Example

Tao Te Ching, Chapter One

The Way that can be told of is not an unvarying way;

The names that can be named are not unvarying names.

It was from the Nameless that Heaven and Earth sprang;

The named is but the mother that rears the ten thousand creatures, each after its kind.

Source Code


{{
from pyjamas.ui import SimplePanel, ScrollPanel, HTML

class ScrollPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        panel = ScrollPanel()

        contents = HTML("<b>Tao Te Ching, Chapter One</b><p>" +
                        "The Way that can be told of is not an unvarying " +
                        "way;<p>The names that can be named are not " +
                        "unvarying names.<p>It was from the Nameless that " +
                        "Heaven and Earth sprang;<p>The named is but the " +
                        "mother that rears the ten thousand creatures, " +
                        "each after its kind.")

        panel.add(contents)
        panel.setSize("300px", "100px")
        self.add(panel)
}}













== ui.StackPanel ==

The ui.StackPanel class displays a "stack" of sub-panels where only one sub-panel is open at a time.

The StackPanel relies heavily on stylesheet definitions to make it look good; the default look of a StackPanel without any styles defined is almost unusable. The following stylesheet definitions were used for the example given below:

        .gwt-StackPanel {
            border: 5px solid #999999;
            background-color: #CCCCCC;
            border-collapse: collapse;
        }

        .gwt-StackPanel .gwt-StackPanelItem {
            border: 2px solid #000099;
            background-color: #FFFFCC;
            cursor: pointer;
            font-weight: normal;
        }

        .gwt-StackPanel .gwt-StackPanelItem-selected {
            border: 3px solid #FF0000;
            background-color: #FFFF66;
            cursor: default;
            font-weight: bold;
        }

You can programatically change the currently-open panel by calling the setStackVisible(index, visible) method. To find out which panel is currently open, call getSelectedIndex(). To retrieve the widget at a given index, call getWidget(index). Finally, you can change the label for a stack item by calling setStackText(index, text).

Working Example

Stack 1
The quick
brown fox
jumps over the
lazy dog.
Stack 2
The
early
bird
catches
the
worm.
Stack 3
The smart money
is on the
black horse.

Source Code


{{
from pyjamas.ui import SimplePanel, StackPanel, HTML

class StackPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        stack = StackPanel()

        stack.add(HTML('The quick<br>brown fox<br>jumps over the<br>lazy dog.'),
                  "Stack 1")
        stack.add(HTML('The<br>early<br>bird<br>catches<br>the<br>worm.'),
                  "Stack 2")
        stack.add(HTML('The smart money<br>is on the<br>black horse.'),
                  "Stack 3")

        stack.setWidth("100%")
        self.add(stack)
}}











== ui.TabPanel ==

The ui.TabPanel class implements a tabbed window, where clicking on a tab causes the associated contents to be displayed.

The TabPanel relies heavily on cascading stylesheet definitions to operate. The following stylesheet definitions are used by the example shown below:

        .gwt-TabPanel {
        }

        .gwt-TabPanelBottom {
          border: 1px solid #87B3FF;
        }

        .gwt-TabBar {
          background-color: #C3D9FF;
        }

        .gwt-TabBar .gwt-TabBarFirst {
          height: 100%;
          padding-left: 3px;
        }

        .gwt-TabBar .gwt-TabBarRest {
          padding-right: 3px;
        }

        .gwt-TabBar .gwt-TabBarItem {
          border-top: 1px solid #C3D9FF;
          border-bottom: 1px solid #C3D9FF;
          padding: 2px;
          cursor: pointer;
        }

        .gwt-TabBar .gwt-TabBarItem-selected {
          font-weight: bold;
          background-color: #E8EEF7;
          border-top: 1px solid #87B3FF;
          border-left: 1px solid #87B3FF;
          border-right: 1px solid #87B3FF;
          border-bottom: 1px solid #E8EEF7;
          padding: 2px;
          cursor: default;
        }

Working Example

 
	
Tab 1
	
Tab 2
	
Tab 3
	
 
The quick brown fox jumps over the lazy dog.
The early bird catches the worm.
The smart money is on the black horse.

Source Code


{{
from pyjamas.ui import SimplePanel, TabPanel, HTML

class TabPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        tabs = TabPanel()
        tabs.add(HTML("The quick brown fox jumps over the lazy dog."), "Tab 1")
        tabs.add(HTML("The early bird catches the worm."), "Tab 2")
        tabs.add(HTML("The smart money is on the black horse."), "Tab 3")

        tabs.selectTab(0)
        tabs.setWidth("100%")
        tabs.setHeight("250px")

        self.add(tabs)
}}











== ui.VerticalPanel ==

The ui.VerticalPanel class is a panel that lays out its contents from top to bottom.

It is often useful to call setSpacing(spacing) to add space between each of the panel's widgets. You can also call setHorizontalAlignment(alignment) and setVerticalAlignment(alignment) before adding widgets to control how those widgets are aligned within the available space. Alternatively, you can call setCellHorizontalAlignment(widget, alignment) and setCellVerticalAlignment(widget, alignment) to change the alignment of a single widget after it has been added.

Note that if you want to have different widgets within the panel take up different amounts of space, don't call widget.setWidth(width) or widget.setHeight(height) as these are ignored by the panel. Instead, call panel.setCellWidth(widget, width) and panel.setCellHeight(widget, height).

Working Example

Part 1
Part 2
Part 3
Part 4

Source Code


{{
from pyjamas.ui import SimplePanel, VerticalPanel, Label, HasAlignment

class VerticalPanelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        panel = VerticalPanel()
        panel.setBorderWidth(1)

        panel.setHorizontalAlignment(HasAlignment.ALIGN_CENTER)
        panel.setVerticalAlignment(HasAlignment.ALIGN_MIDDLE)

        part1 = Label("Part 1")
        part2 = Label("Part 2")
        part3 = Label("Part 3")
        part4 = Label("Part 4")

        panel.add(part1)
        panel.add(part2)
        panel.add(part3)
        panel.add(part4)

        panel.setCellHeight(part1, "10%")
        panel.setCellHeight(part2, "70%")
        panel.setCellHeight(part3, "10%")
        panel.setCellHeight(part4, "10%")

        panel.setCellHorizontalAlignment(part3, HasAlignment.ALIGN_RIGHT)

        panel.setWidth("50%")
        panel.setHeight("300px")

        self.add(panel)
}}



== ui.Button ==

The ui.Button class is used to show a button. When the user clicks on the button, the given listener function is called.

Note that you can use the getattr() function to specify which method you want called when the button is clicked. This is the best way to write button click handlers if you have more than one button on your panel. If you have only one button, you can use btn = Button("...", self) instead, and define a method called onClick() to respond to the button click.

Another useful method is Button.setEnabled(enabled), which enables or disables the button depending on the value of its parameter.

Working Example

Click Me

Source Code


{{
from pyjamas.ui import SimplePanel, Button
from pyjamas import Window

class ButtonDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        btn = Button("Click Me", getattr(self, "onButtonClick"))
        self.add(btn)


    def onButtonClick(self):
        Window.alert("Ouch!")
}}













== ui.CheckBox ==

The ui.CheckBox class is used to show a standard checkbox. When the user clicks on the checkbox, the checkbox's state is toggled.

The setChecked(checked) method checks or unchecks the checkbox depending on the value of the parameter. To get the current value of the checkbox, call isChecked().

You can enable or disable a checkbox using setEnabled(enabled). You can also call addClickListener() to respond when the user clicks on the checkbox, as shown below. This can be useful when building complicated input screens where checking a checkbox causes other input fields to be enabled.

Working Example

Print Results?

Source Code


{{
from pyjamas.ui import SimplePanel, CheckBox
from pyjamas import Window

class CheckBoxDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        self.box = CheckBox("Print Results?")
        self.box.addClickListener(getattr(self, "onClick"))

        self.add(self.box)


    def onClick(self):
        Window.alert("checkbox status: " + self.box.isChecked())
}}











== ui.FileUpload ==

The ui.FileUpload class implements a file uploader widget.

The FileUpload widget must be inside a ui.FormPanel which is used to submit the HTML form to the server. Note that you must set the form encoding and method like this:

            self.form.setEncoding(FormPanel.ENCODING_MULTIPART)
            self.form.setMethod(FormPanel.METHOD_POST)

This will ensure that the form is submitted in a way that allows files to be uploaded.

The example below doesn't really work, as there is no suitable server at nonexistent.com. However, it does show how a file upload widget could be used within a FormPanel.

Working Example

Upload file:
		Submit

Source Code


{{
from pyjamas.ui import SimplePanel, FormPanel, VerticalPanel, HorizontalPanel, FileUpload, Label, Button

class FileUploadDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        self.form = FormPanel()
        self.form.setEncoding(FormPanel.ENCODING_MULTIPART)
        self.form.setMethod(FormPanel.METHOD_POST)
        self.form.setAction("http://nonexistent.com")
        self.form.setTarget("results")

        vPanel = VerticalPanel()

        hPanel = HorizontalPanel()
        hPanel.setSpacing(5)
        hPanel.add(Label("Upload file:"))

        self.field = FileUpload()
        self.field.setName("file")
        hPanel.add(self.field)

        hPanel.add(Button("Submit", getattr(self, "onBtnClick")))

        vPanel.add(hPanel)

        results = NamedFrame("results")
        vPanel.add(results)

        self.form.add(vPanel)
        self.add(self.form)


    def onBtnClick(self):
        self.form.submit()
}}









== ui.Frame ==

The ui.Frame class is used to embed a separate HTML page within your application.

If you pass a URL when the Frame is created, that URL will be used immediately. Alternatively, you can call the Frame.setUrl() method to change the URL at any time. You can also call Frame.getUrl() to retrieve the current URL for this frame.

Working Example

Source Code


{{
from pyjamas.ui import SimplePanel, Frame

class FrameDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        frame = Frame("http://google.com")
        frame.setWidth("100%")
        frame.setHeight("200px")
        self.add(frame)
}}













== ui.Hidden ==

The ui.Hidden class represents a hidden form field.

This is really only useful when the hidden field is part of a ui.FormPanel.

Working Example

Search

Source Code


{{
from pyjamas.ui import SimplePanel, FormPanel, VerticalPanel, Hidden, Button, NamedFrame

class HiddenDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        self.form = FormPanel()
        self.form.setAction("http://google.com/search")
        self.form.setTarget("results")

        panel = VerticalPanel()
        panel.add(Hidden("q", "python pyjamas"))
        panel.add(Button("Search", getattr(self, "onBtnClick")))

        results = NamedFrame("results")
        panel.add(results)

        self.form.add(panel)
        self.add(self.form)


    def onBtnClick(self):
        self.form.submit()

}}








== ui.Html ==

The ui.HTML class displays HTML-formatted text. To display unformatted text, use ui.Label.

Working Example

Hello, World!

Source Code


{{
from pyjamas.ui import SimplePanel, HTML

class HtmlDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        html = HTML("Hello, <b><i>World!</i></b>")
        self.add(html)
}}
















== ui.Hyperlink ==

The ui.Hyperlink class acts as an "internal" hyperlink to a particular state of the application. These states are stored in the application's history, allowing for the use of the Back and Next buttons in the browser to move between application states.

The ui.Hyperlink class only makes sense in an application which keeps track of state using the History module. When the user clicks on a hyperlink, the application changes state by calling History.newItem(newState). The application then uses a history listener function to respond to the change in state in whatever way makes sense.

Working Example

state number 2
State 1
	
State 2

Source Code


{{
from pyjamas.ui import SimplePanel, VerticalPanel, HorizontalPanel, Hyperlink, Label
{{
from History import History


class HyperlinkDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        History().addHistoryListener(self)

        vPanel = VerticalPanel()

        self.stateDisplay = Label()
        vPanel.add(self.stateDisplay)

        hPanel = HorizontalPanel()
        hPanel.setSpacing(5)
        hPanel.add(Hyperlink("State 1", False, "state number 1"))
        hPanel.add(Hyperlink("State 2", False, "state number 2"))

        vPanel.add(hPanel)
        self.add(vPanel)


    def onHistoryChanged(self, state):
        self.stateDisplay.setText(state)
}}















== ui.Image ==

The ui.Image class is used to display an image.

The Image class can display any image that is specified by a URL. This can be an image stored somewhere on the internet, or alternatively you can store an image in the "public" directory within your application's source folder, and then access it using a relative URL, as shown below.

In this example, the image file named "myImage.jpg" is stored inside the "images" sub-directory, which is in the "public" directory within the application's main source directory.

As well as passing the image URL to the initialiser, you can call setURL() to change the image being displayed at any time. You can also call addClickListener() to add a listener function to be called when the user clicks on the image.

Working Example

Source Code


{{
from pyjamas.ui import SimplePanel, Image
from pyjamas import Window

class ImageDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        # We display the "myImage.jpg" file, stored in the "public/images"
        # directory, where "public" is in the application's source directory.

        img = Image("images/myImage.jpg")
        img.addClickListener(getattr(self, "onImageClicked"))
        self.add(img)


    def onImageClicked(self):
        Window.alert("Stop that!")
}}













== ui.Label ==

The ui.Label class is used to display unformatted text. Unlike the ui.HTML class, it does not interpret HTML format codes. If you pass False as the second parameter when creating your label, word wrapping will be disabled, forcing all the text to be on one line.

Working Example

This is a label

Source Code


{{
from pyjamas.ui import SimplePanel, Label

class LabelDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        label = Label("This is a label", wordWrap=False)
        self.add(label)
}}














== ui.ListBox ==

The ui.ListBox class allows the user to select one or more items from a list. There are two variations of the ListBox: a normal list of items the user can click on, and a dropdown menu of items. Both variations are shown in the example below.

You add items to a list by calling ListBox.addItem(). This can take the label to display, and also an optional value to associate with that item in the list. ListBox.getSelectedIndex() returns the index of the currently selected item, or -1 if nothing is selected. ListBox.getItemText(n) returns the text for the given item in the list, while ListBox.getValue(n) returns the value associated with the given list item. To detect when the user selects something from a ListBox, call addChangeLister(). And finally, ListBox.clear() clears the current contents of the ListBox.

Working Example

	

Source Code


{{
from pyjamas.ui import SimplePanel, HorizontalPanel, ListBox
from pyjamas import Window

class ListBoxDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        hPanel = HorizontalPanel()
        hPanel.setSpacing(10)

        self.list1 = ListBox()
        self.list1.setVisibleItemCount(10)
        self.list1.addItem("Item 1")
        self.list1.addItem("Item 2")
        self.list1.addItem("Item 3")
        self.list1.addChangeListener(getattr(self, "onList1ItemSelected"))

        self.list2 = ListBox()
        self.list2.setVisibleItemCount(0)
        self.list2.addItem("Item A")
        self.list2.addItem("Item B")
        self.list2.addItem("Item C")
        self.list2.addChangeListener(getattr(self, "onList2ItemSelected"))

        hPanel.add(self.list1)
        hPanel.add(self.list2)
        self.add(hPanel)


    def onList1ItemSelected(self):
        item = self.list1.getItemText(self.list1.getSelectedIndex())
        Window.alert("You selected " + item + " from list 1")


    def onList2ItemSelected(self):
        item = self.list2.getItemText(self.list2.getSelectedIndex())
        Window.alert("You selected " + item + " from list 2")
}}















== ui.Menubar ==

The ui.MenuBar and ui.MenuItem classes allow you to define menu bars in your application.

There are several important things to be aware of when adding menus to your application:

    * You have to use a stylesheet to define the look of your menu. The default style is terrible, as it makes the menu unusable. The following stylesheet entries were used for the example code below:

            .gwt-MenuBar {
              background-color: #C3D9FF;
              border: 1px solid #87B3FF;
              cursor: default;
            }

            .gwt-MenuBar .gwt-MenuItem {
              padding: 1px 4px 1px 4px;
              font-size: smaller;
              cursor: default;
            }

            .gwt-MenuBar .gwt-MenuItem-selected {
              background-color: #E8EEF7;
            }

    * By default, each menu item can be associated with a class, whose execute method will be called when that item is selected. Note that a helper class, MenuCmd, is defined below to allow more than one menu item handler method to be defined within a single class.

    * You add menu items directly, passing the item label and the associated command to MenuBar.addItem(). For adding sub-menus, you need to wrap the sub-menu up in a MenuItem, as shown below.

    * You can use HTML codes in a menu item's label by calling MenuBar.addItem(label, True, cmd) instead of MenuBar.addItem(label, cmd). Similarly, you can use HTML styling in a menu's title by calling MenuItem(label, True, submenu), as in the second-to-last line of MenubarDemo.__init__, below. 

Working Example

Menu 1	Menu 2

Source Code


{{
from pyjamas.ui import SimplePanel, MenuBar, MenuItem
from pyjamas import Window

class MenubarDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        menu1 = MenuBar(vertical=True)
        menu1.addItem("Item 1", MenuCmd(self, "onMenu1Item1"))
        menu1.addItem("Item 2", MenuCmd(self, "onMenu1Item2"))

        menu2 = MenuBar(vertical=True)
        menu2.addItem("Apples", MenuCmd(self, "onMenu2Apples"))
        menu2.addItem("Oranges", MenuCmd(self, "onMenu2Oranges"))

        menubar = MenuBar(vertical=False)
        menubar.addItem(MenuItem("Menu 1", menu1))
        menubar.addItem(MenuItem("<i>Menu 2</i>", True, menu2))
        self.add(menubar)

    def onMenu1Item1(self):
        Window.alert("Item 1 selected")

    def onMenu1Item2(self):
        Window.alert("Item 2 selected")

    def onMenu2Apples(self):
        Window.alert("Apples selected")

    def onMenu2Oranges(self):
        Window.alert("Oranges selected")


class MenuCmd:
    def __init__(self, object, handler):
        self._object  = object
        self._handler = handler

    def execute(self):
        handler = getattr(self._object, self._handler)
        handler()
}}













== ui.NamedFrame ==

The ui.NamedFrame class is a variation of the ui.Frame which lets you assign a name to the frame. Naming a frame allows you to refer to that frame by name in Javascript code, and as the target for a hyperlink.

Working Example

Google
Yahoo

Source Code


{{
from pyjamas.ui import SimplePanel, VerticalPanel, NamedFrame, HTML

class NamedFrameDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        vPanel = VerticalPanel()
        vPanel.setSpacing(5)

        frame = NamedFrame("myFrame")
        frame.setWidth("100%")
        frame.setHeight("200px")

        vPanel.add(frame)
        vPanel.add(HTML('<a href="http://google.com" target="myFrame">Google</a>'))
        vPanel.add(HTML('<a href="http://yahoo.com" target="myFrame">Yahoo</a>'))

        self.add(vPanel)
}}














== ui.PasswordTextBox ==

The ui.PasswordTextBox class implements a standard password input field.

Like its cousins the ui.TextBox and ui.TextArea classes, ui.PasswordTextBox defines many useful methods which you may find useful.

The most important methods are probably setText() and getText() which set and retrieve the contents of the input field, and setMaxLength() to specify how many characters the user can type into the field.

Note that for some reason, the setVisibleLength() method is not defined for a password field. This means that you have to specify the width of the field in pixels, as is shown below.

Working Example

Source Code


{{
from pyjamas.ui import SimplePanel, PasswordTextBox

class PasswordTextBoxDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        field = PasswordTextBox()
        field.setWidth("100px")
        self.add(field)
}}















== ui.RadioButton ==

The ui.RadioButton class is used to show a radio button. Each radio button is given a "group" value; when the user clicks on a radio button, the other radio buttons in that group are deselected, and the clicked on radio button is selected.

You can use the setChecked(checked) method to select or deselect a radio button, and you can call isChecked() to see if a radio button is currently selected. You can also enable or disable a checkbox using setEnabled(enabled). And finally, you can call addClickListener() to respond when the user clicks on the radio button.

Working Example

Red
Green
Blue
	
Solid
Liquid
Gas

Source Code


{{
from pyjamas.ui import SimplePanel, HorizontalPanel, VerticalPanel, RadioButton

class RadioButtonDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        panel1 = VerticalPanel()

        panel1.add(RadioButton("group1", "Red"))
        panel1.add(RadioButton("group1", "Green"))
        panel1.add(RadioButton("group1", "Blue"))

        panel2 = VerticalPanel()
        panel2.add(RadioButton("group2", "Solid"))
        panel2.add(RadioButton("group2", "Liquid"))
        panel2.add(RadioButton("group2", "Gas"))

        hPanel = HorizontalPanel()
        hPanel.add(panel1)
        hPanel.add(panel2)

        self.add(hPanel)
}}












== ui.TextArea ==

The ui.TextArea class implements a standard multi-line input field.

The setCharacterWidth() method sets the width of the input field, in characters, while setVisibleLines() sets the height of the field, in lines.

Use the getText() method to retrieve the field's current text, and setText() to set it. There are many other useful methods defined by ui.TextArea and its parent classes; see the module documentation for more details.

Working Example

Source Code


{{
from pyjamas.ui import SimplePanel, TextArea

class TextAreaDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        field = TextArea()
        field.setCharacterWidth(20)
        field.setVisibleLines(4)
        self.add(field)
}}















== ui.TextBox ==

The ui.TextBox class implements a standard one-line input field.

There are many useful methods defined by ui.TextBox and its parent classes. For example, getText() returns the current contents of the input field, and setText() lets you set the field's contents to a given string.

setVisibleLength() lets you set the width of the field, in characters. Similarly, setMaxLength() lets you set the maximum number of characters the user can enter into the field.

Working Example

Source Code


{{
from pyjamas.ui import SimplePanel, TextBox

class TextBoxDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        field = TextBox()
        field.setVisibleLength(20)
        field.setMaxLength(10)

        self.add(field)
}}











== ui.Tree ==

The ui.Tree class lets you add a tree control to your application.

Call Tree.addTreeListener() to add a tree listener object to a tree, that listener object's onTreeItemSelected() method will be called as the user clicks on that item in the tree control. Similarly, the listener object's onTreeItemStateChanged() method will be called whenever the user opens or closes a branch of the tree. Both of these methods have to be defined, even if you don't use them both.

To open a branch of the tree, call TreeItem.setState() method. If the state parameter is True, the branch of the tree will be opened; if it is False, the branch of the tree will be closed.

Working Example

	Section 1
	Item 1.1
	Item 1.2
	Section 2
	Item 2.1
	Item 2.2

Source Code


{{
from pyjamas.ui import SimplePanel, Tree, TreeItem
from pyjamas import DOM
from pyjamas import Window

class TreeDemo(SimplePanel):
    def __init__(self):
        SimplePanel.__init__(self)

        tree = Tree()
        tree.addTreeListener(self)

        s1 = self.createItem("Section 1")
        s1.addItem(self.createItem("Item 1.1", value=11))
        s1.addItem(self.createItem("Item 1.2", value=12))

        s2 = self.createItem("Section 2")
        s2.addItem(self.createItem("Item 2.1", value=21))
        s2.addItem(self.createItem("Item 2.2", value=22))

        s1.setState(True, fireEvents=False)
        s2.setState(True, fireEvents=False)

        tree.addItem(s1)
        tree.addItem(s2)
        self.add(tree)


    def createItem(self, label, value=None):
        item = TreeItem(label)
        DOM.setStyleAttribute(item.getElement(), "cursor", "pointer")
        if value != None:
            item.setUserObject(value)
        return item


    def onTreeItemSelected(self, item):
        value = item.getUserObject()
        Window.alert("You clicked on " + value)


    def onTreeItemStateChanged(self, item):
        pass # We ignore this.
}}

