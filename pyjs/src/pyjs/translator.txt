==========
Translator
==========

The python -> javascript translator translates a single module into a
javascript file. It accepts a list of source files, where each of the
files is an override of its predecessor.


    >>> from pyjs import translator

Let us write a simple module.

    >>> import tempfile, os
    >>> tmp = tempfile.mkdtemp()

    >>> mymodule1 = os.path.join(tmp, 'mymodule1.py')
    >>> out_file = os.path.join(tmp, 'mymodule.js')
    >>> f = file(mymodule1, 'w')
    >>> f.write("""
    ... def main():
    ...     print 1
    ... if __name__=='__main__':
    ...     main()
    ... """)
    >>> f.close()


Compile our module.

    >>> translator.translate([mymodule1], out_file,
    ...                      debug=False,
    ...                      print_statements = True,
    ...                      function_argument_checking=True,
    ...                      attribute_checking=True,
    ...                      source_tracking=False,
    ...                      line_tracking=False,
    ...                      store_source=False)
    []
    >>> print file(out_file).read()
    /* start module: mymodule1 */
    var mymodule1 = $pyjs.loaded_modules["mymodule1"] = function (__mod_name__) {
    ...
	pyjslib.printFunc([1], 1);...


Let us write an override and rewrite th main function.

    >>> mymodule2 = os.path.join(tmp, 'mymodule2.py')
    >>> f = file(mymodule2, 'w')
    >>> f.write("""
    ... def main():
    ...     print 2
    ... """)
    >>> f.close()


    >>> translator.translate([mymodule1, mymodule2], out_file,
    ...                      debug=False,
    ...                      print_statements = True,
    ...                      function_argument_checking=True,
    ...                      attribute_checking=True,
    ...                      source_tracking=False,
    ...                      line_tracking=False,
    ...                      store_source=False)
    []

We now get the override.

    >>> print file(out_file).read()
    /* start module: mymodule1 */
    var mymodule1 = $pyjs.loaded_modules["mymodule1"] = function (__mod_name__) {
    ...
	pyjslib.printFunc([2], 1);...
    if (pyjslib.bool(pyjslib.eq(mymodule1.__name__, String('__main__')))) {
    ...


The import statement just generates js functions, it does not care if
modules are there.

    >>> imports = os.path.join(tmp, 'imports.py')
    >>> f = file(imports, 'w')
    >>> f.write("""
    ... import a
    ... import a.b
    ... from a.b import c
    ... from x import z as y
    ... def main():
    ...     import z as x
    ... """)
    >>> f.close()

    >>> translator.translate([imports], out_file,
    ...                      debug=False,
    ...                      print_statements = True,
    ...                      function_argument_checking=True,
    ...                      attribute_checking=True,
    ...                      source_tracking=False,
    ...                      line_tracking=False,
    ...                      store_source=False)
    ['a', 'a.b', 'x', 'z']

    >>> print file(out_file).read()
    /* start module: imports */
    ...
    /*
    PYJS_DEPS: ['a', 'a.b', 'x', 'z']
    */

